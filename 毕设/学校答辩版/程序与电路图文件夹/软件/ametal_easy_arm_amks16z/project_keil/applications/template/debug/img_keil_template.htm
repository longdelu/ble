<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\debug\img_keil_template.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\debug\img_keil_template.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Thu Jun 07 16:23:31 2018
<BR><P>
<H3>Maximum Stack Usage =        424 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; amdr_i2c_init &rArr; __i2c_hard_init &rArr; __i2c_speed_set &rArr; amdr_clk_periph_rate_get &rArr; amdr_clk_bus_clkrate_get &rArr; amdr_clk_core_clkrate_get &rArr; amdr_clk_mcgoutclk_rate_get &rArr; amdr_clk_mcgfllclk_rate_get &rArr; __ARM_common_switch8
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[8f]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">NMI_Handler</a><BR>
 <LI><a href="#[9]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">HardFault_Handler</a><BR>
 <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[9]">HardFault_Handler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[8]">NMI_Handler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[7]">Reset_Handler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from startup_mkl16z4.o(.text) referenced from startup_mkl16z4.o(RESET)
 <LI><a href="#[14]">__i2c_callback</a> from am_i2c.o(i.__i2c_callback) referenced from am_i2c.o(i.am_i2c_read)
 <LI><a href="#[14]">__i2c_callback</a> from am_i2c.o(i.__i2c_callback) referenced from am_i2c.o(i.am_i2c_write)
 <LI><a href="#[21]">__i2c_connect</a> from amdr_i2c.o(i.__i2c_connect) referenced from amdr_i2c.o(.constdata)
 <LI><a href="#[12]">__i2c_irq_handler</a> from amdr_i2c.o(i.__i2c_irq_handler) referenced from amdr_i2c.o(i.__i2c_connect)
 <LI><a href="#[20]">__i2c_transfer</a> from amdr_i2c.o(i.__i2c_transfer) referenced from amdr_i2c.o(.constdata)
 <LI><a href="#[22]">__main</a> from __main.o(!!!main) referenced from startup_mkl16z4.o(.text)
 <LI><a href="#[1c]">__uart_callback_set</a> from amdr_uart.o(i.__uart_callback_set) referenced from amdr_uart.o(.constdata)
 <LI><a href="#[1f]">__uart_connect</a> from amdr_uart.o(i.__uart_connect) referenced from amdr_uart.o(.constdata)
 <LI><a href="#[17]">__uart_dummy_callback</a> from amdr_uart.o(i.__uart_dummy_callback) referenced from amdr_uart.o(i.amdr_uart_init)
 <LI><a href="#[1a]">__uart_ioctl</a> from amdr_uart.o(i.__uart_ioctl) referenced from amdr_uart.o(.constdata)
 <LI><a href="#[13]">__uart_irq_handler</a> from amdr_uart.o(i.__uart_irq_handler) referenced from amdr_uart.o(i.__uart_connect)
 <LI><a href="#[1d]">__uart_poll_getchar</a> from amdr_uart.o(i.__uart_poll_getchar) referenced from amdr_uart.o(.constdata)
 <LI><a href="#[1e]">__uart_poll_putchar</a> from amdr_uart.o(i.__uart_poll_putchar) referenced from amdr_uart.o(.constdata)
 <LI><a href="#[1b]">__uart_tx_startup</a> from amdr_uart.o(i.__uart_tx_startup) referenced from amdr_uart.o(.constdata)
 <LI><a href="#[16]">__usart_int_rxchar_put</a> from am_uart_int.o(i.__usart_int_rxchar_put) referenced from am_uart_int.o(i.am_uart_int_init)
 <LI><a href="#[15]">__usart_int_txchar_get</a> from am_uart_int.o(i.__usart_int_txchar_get) referenced from am_uart_int.o(i.am_uart_int_init)
 <LI><a href="#[11]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[19]">_printf_fp_dec_real</a> from _printf_fp_dec.o(.text) referenced from printf1.o(x$fpl$printf1)
 <LI><a href="#[10]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[d]">am_exc_eint_handler</a> from amdr_int.o(i.am_exc_eint_handler) referenced 30 times from startup_mkl16z4.o(RESET)
 <LI><a href="#[18]">am_int_wake_up_cal</a> from am_key.o(i.am_int_wake_up_cal) referenced from demo_std_low_fly_mouse.o(.constdata)
 <LI><a href="#[18]">am_int_wake_up_cal</a> from am_key.o(i.am_int_wake_up_cal) referenced from demo_std_low_fly_mouse.o(i.main)
 <LI><a href="#[f]">fputc</a> from am_debug.o(i.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[22]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[23]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[25]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[192]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[193]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[194]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[81]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[26]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_n &rArr; _printf_p &rArr; _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[27]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[29]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[2b]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[2d]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[2e]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>

<P><STRONG><a name="[2f]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[31]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
</UL>

<P><STRONG><a name="[32]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[34]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[35]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[36]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[38]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_lld &rArr; _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[3a]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[3c]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
</UL>

<P><STRONG><a name="[3d]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
</UL>

<P><STRONG><a name="[3e]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_l
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[40]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[42]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_l
</UL>

<P><STRONG><a name="[43]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[45]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[47]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[49]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[53]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[195]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[196]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[4b]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[197]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[198]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[199]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[19a]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[4d]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[19b]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[19c]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[4e]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[19d]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[19e]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[19f]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1a0]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1a1]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1a2]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1a3]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1a4]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1a5]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1a6]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1a7]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1a8]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1a9]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[58]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1aa]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1ab]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1ac]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1ad]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1ae]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1af]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1b0]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[24]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1b1]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[50]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[52]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1b2]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[54]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; amdr_i2c_init &rArr; __i2c_hard_init &rArr; __i2c_speed_set &rArr; amdr_clk_periph_rate_get &rArr; amdr_clk_bus_clkrate_get &rArr; amdr_clk_core_clkrate_get &rArr; amdr_clk_mcgoutclk_rate_get &rArr; amdr_clk_mcgfllclk_rate_get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1b3]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[97]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[57]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1b4]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[59]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_speed_set
</UL>

<P><STRONG><a name="[1b5]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[7]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl16z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mkl16z4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[175]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
</UL>

<P><STRONG><a name="[1b6]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>__aeabi_uldivmod</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, lludiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_delay_init
</UL>

<P><STRONG><a name="[1b7]"></a>_ll_udiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>__c89vprintf</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, c89vprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __c89vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_kprintf
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
</UL>

<P><STRONG><a name="[5a]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, am_debug.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[186]"></a>memcmp</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>

<P><STRONG><a name="[5f]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[5e]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[1b8]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1bb]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mdelay
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_bus_clkrate_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_uart_baudrate_set
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_core_clkrate_get
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_delay_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mcgpllclk_rate_get
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mcgirclk_rate_get
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mcgfllclk_rate_get
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_speed_set
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_pee2blpe
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__err_cal
</UL>

<P><STRONG><a name="[1bc]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time_multi
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_timeout
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_time
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_thresh
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_fifo_rate
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[1bd]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_dmp_get_data
</UL>

<P><STRONG><a name="[1c0]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[62]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[65]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[15e]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[66]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[68]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[67]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_dmp_get_data
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[1c1]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_dmp_get_data
</UL>

<P><STRONG><a name="[1c2]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_dmp_get_data
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
</UL>

<P><STRONG><a name="[6a]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[69]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[17d]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ffixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[1c3]"></a>_ffix</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixi.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
</UL>

<P><STRONG><a name="[1c4]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_dmp_get_data
</UL>

<P><STRONG><a name="[1c5]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
</UL>

<P><STRONG><a name="[1c6]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[70]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[72]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[73]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[74]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[75]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[71]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[33]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[28]"></a>_printf_charcount</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[5c]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vprintf
</UL>

<P><STRONG><a name="[7a]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[3b]"></a>_printf_longlong_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[7d]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[37]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[3f]"></a>_printf_ll_oct</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[7e]"></a>_printf_longlong_hex</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[39]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[41]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[2a]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[7f]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[c4]"></a>__ARM_scalbn</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dscalbn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[18c]"></a>_dsqrt</STRONG> (Thumb, 248 bytes, Stack size 20 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[1c7]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>_ll_udiv10</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[77]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1c9]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[19]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(x$fpl$printf1)
</UL>
<P><STRONG><a name="[78]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[89]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[44]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[46]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[8b]"></a>_printf_lcs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[48]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[4a]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[79]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[7b]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[76]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1ca]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1cb]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[8d]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[4c]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[88]"></a>_printf_fp_infnan</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[83]"></a>_btod_etento</STRONG> (Thumb, 196 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[84]"></a>_btod_d2e</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _btod_d2e
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[86]"></a>_btod_emul</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[93]"></a>_btod_emuld</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[85]"></a>_btod_ediv</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _btod_ediv &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[95]"></a>_btod_edivd</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>

<P><STRONG><a name="[56]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[18d]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1cc]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>__ARM_common_ll_mulss</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.__ARM_common_ll_mulss))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_mulss
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_gyro_bias
</UL>

<P><STRONG><a name="[92]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, am_adc.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[d8]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, amdr_adc.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_trigger_cfg
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_ioctl
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mcgfllclk_rate_get
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_pmu_mode_into
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_lpf
</UL>

<P><STRONG><a name="[87]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[98]"></a>__clk_fei_init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, amdr_clk.o(i.__clk_fei_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __clk_fei_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_sim_pllfll_sel_set
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_sim_ercclk32k_src_set
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_sim_clkdiv1_outdiv4_set
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_sim_clkdiv1_outdiv1_set
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_outclk_stat_get
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_outclk_src_set
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_irc_src_set
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_irc_fast_div_set
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_irc_enable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_fll_stat_get
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_fll_src_set
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_fll_erc_div_set
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_fll_dco_div_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_atm_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_init
</UL>

<P><STRONG><a name="[a7]"></a>__clk_pee_init</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, amdr_clk.o(i.__clk_pee_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __clk_pee_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_sim_pllfll_sel_set
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_sim_ercclk32k_src_set
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_sim_clkdiv1_outdiv4_set
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_sim_clkdiv1_outdiv1_set
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_pll_vco_div_set
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_pll_locked_stat_get
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_pll_erc_div_set
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_outclk_stat_get
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_outclk_src_set
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_irc_src_set
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_irc_fast_div_set
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_irc_enable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_fll_stat_get
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_fll_src_set
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_fll_erc_div_set
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_fll_dco_div_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_atm_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_init
</UL>

<P><STRONG><a name="[13c]"></a>__fll_div_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, amdr_clk.o(i.__fll_div_get))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_init
</UL>

<P><STRONG><a name="[14]"></a>__i2c_callback</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, am_i2c.o(i.__i2c_callback))
<BR>[Address Reference Count : 2]<UL><LI> am_i2c.o(i.am_i2c_read)
<LI> am_i2c.o(i.am_i2c_write)
</UL>
<P><STRONG><a name="[12]"></a>__i2c_irq_handler</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, amdr_i2c.o(i.__i2c_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __i2c_irq_handler &rArr; __i2c_mst_sm_event &rArr; __i2c_send_data
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_mst_sm_event
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_i2c_tmout_flag_clr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_i2c_stat_clr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_end_with_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amdr_i2c.o(i.__i2c_connect)
</UL>
<P><STRONG><a name="[b7]"></a>__i2c_mst_sm_event</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, amdr_i2c.o(i.__i2c_mst_sm_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __i2c_mst_sm_event &rArr; __i2c_send_data
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_i2c_transmode_set
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_i2c_nak_respond
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_i2c_ack_respond
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_send_data
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_recv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_irq_handler
</UL>

<P><STRONG><a name="[c0]"></a>__kernel_poly</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[c3]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[c5]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[c6]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[c8]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[cd]"></a>__pmu_cpu_wif</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, amdr_pmu.o(i.__pmu_cpu_wif))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_wait_into
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_vlps_into
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_vlls_into
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_stop_into
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_lls_into
</UL>

<P><STRONG><a name="[c9]"></a>__pmu_lls_into</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, amdr_pmu.o(i.__pmu_lls_into))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __pmu_lls_into &rArr; amhw_smc_stop_mdoe_sel
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_llwu_wuflags_clr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_cpu_wif
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_smc_stop_mdoe_sel
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_smc_stop_mdoe_isabort
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_pmu_mode_into
</UL>

<P><STRONG><a name="[ce]"></a>__pmu_stop_into</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, amdr_pmu.o(i.__pmu_stop_into))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __pmu_stop_into &rArr; amhw_smc_stop_mdoe_sel
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_cpu_wif
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_smc_stop_mdoe_sel
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_smc_stop_mdoe_isabort
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_pmu_mode_into
</UL>

<P><STRONG><a name="[cf]"></a>__pmu_vlls_into</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, amdr_pmu.o(i.__pmu_vlls_into))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __pmu_vlls_into &rArr; amhw_smc_stop_mdoe_sel
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_llwu_wuflags_clr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_cpu_wif
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_smc_stop_mdoe_sel
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_smc_stop_mdoe_isabort
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_pmu_mode_into
</UL>

<P><STRONG><a name="[d0]"></a>__pmu_vlpr_exit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, amdr_pmu.o(i.__pmu_vlpr_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __pmu_vlpr_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_smc_run_mdoe_sel
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_pmc_regulator_wstat_get
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_pmu_mode_get
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_pmu_mode_into
</UL>

<P><STRONG><a name="[d4]"></a>__pmu_vlpr_into</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, amdr_pmu.o(i.__pmu_vlpr_into))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __pmu_vlpr_into
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_smc_run_mdoe_sel
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_pmc_regulator_wstat_get
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_pmu_mode_get
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_pmu_mode_into
</UL>

<P><STRONG><a name="[d5]"></a>__pmu_vlps_into</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, amdr_pmu.o(i.__pmu_vlps_into))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __pmu_vlps_into &rArr; amhw_smc_stop_mdoe_sel
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_cpu_wif
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_smc_stop_mdoe_sel
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_smc_stop_mdoe_isabort
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_pmu_mode_into
</UL>

<P><STRONG><a name="[d6]"></a>__pmu_wait_into</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, amdr_pmu.o(i.__pmu_wait_into))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __pmu_wait_into
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_cpu_wif
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_pmu_mode_into
</UL>

<P><STRONG><a name="[13]"></a>__uart_irq_handler</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, amdr_uart.o(i.__uart_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __uart_irq_handler &rArr; __uart_irq_tx_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_irq_tx_handler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_irq_rx_handler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_uart_intstat_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amdr_uart.o(i.__uart_connect)
</UL>
<P><STRONG><a name="[dd]"></a>__uart_irq_rx_handler</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, amdr_uart.o(i.__uart_irq_rx_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __uart_irq_rx_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_uart_intstat_get
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_irq_handler
</UL>

<P><STRONG><a name="[de]"></a>__uart_irq_tx_handler</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, amdr_uart.o(i.__uart_irq_tx_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __uart_irq_tx_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_uart_txdata_write
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_uart_intstat_get
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_uart_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_irq_handler
</UL>

<P><STRONG><a name="[db]"></a>__uart_mode_set</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, amdr_uart.o(i.__uart_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __uart_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_uart_int_enable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_uart_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_uart_init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_ioctl
</UL>

<P><STRONG><a name="[dc]"></a>__uart_opt_set</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, amdr_uart.o(i.__uart_opt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __uart_opt_set
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_uart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_uart_init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_ioctl
</UL>

<P><STRONG><a name="[16]"></a>__usart_int_rxchar_put</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, am_uart_int.o(i.__usart_int_rxchar_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __usart_int_rxchar_put
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_wait_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> am_uart_int.o(i.am_uart_int_init)
</UL>
<P><STRONG><a name="[15]"></a>__usart_int_txchar_get</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, am_uart_int.o(i.__usart_int_txchar_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __usart_int_txchar_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_wait_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> am_uart_int.o(i.am_uart_int_init)
</UL>
<P><STRONG><a name="[80]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[e3]"></a>am_board_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, am_board.o(i.am_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = am_board_init &rArr; am_debug_init &rArr; amdr_clk_periph_rate_get &rArr; amdr_clk_bus_clkrate_get &rArr; amdr_clk_core_clkrate_get &rArr; amdr_clk_mcgoutclk_rate_get &rArr; amdr_clk_mcgfllclk_rate_get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_plfm_gpio_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_int_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_gpio_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_system_init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_debug_init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_delay_init
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>am_data_send</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, demo_std_low_fly_mouse.o(i.am_data_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = am_data_send &rArr; am_uart_int_send
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_uart_int_send
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e9]"></a>am_debug_init</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, am_debug.o(i.am_debug_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = am_debug_init &rArr; amdr_clk_periph_rate_get &rArr; amdr_clk_bus_clkrate_get &rArr; amdr_clk_core_clkrate_get &rArr; amdr_clk_mcgoutclk_rate_get &rArr; amdr_clk_mcgfllclk_rate_get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_pin_cfg
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_uart_baudrate_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_periph_rate_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_board_init
</UL>

<P><STRONG><a name="[e8]"></a>am_delay_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, am_delay.o(i.am_delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = am_delay_init &rArr; amdr_clk_core_clkrate_get &rArr; amdr_clk_mcgoutclk_rate_get &rArr; amdr_clk_mcgfllclk_rate_get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_systick_val_set
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_core_clkrate_get
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_board_init
</UL>

<P><STRONG><a name="[d]"></a>am_exc_eint_handler</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, amdr_int.o(i.am_exc_eint_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_exc_eint_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl16z4.o(RESET)
</UL>
<P><STRONG><a name="[108]"></a>am_gpio_get</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, amdr_gpio.o(i.am_gpio_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = am_gpio_get
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_matrix_key_scan
</UL>

<P><STRONG><a name="[ec]"></a>am_gpio_pin_cfg</STRONG> (Thumb, 448 bytes, Stack size 32 bytes, amdr_gpio.o(i.am_gpio_pin_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = am_gpio_pin_cfg &rArr; amhw_port_pin_func_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_port_pin_pull_up
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_port_pin_pull_enable
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_port_pin_func_cfg
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_gpio_pin_dir_output
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_gpio_pin_dir_input
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_debug_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_plfm_i2c0_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_matrix_key_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_int_wake_up_cfg
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_plfm_uart1_init
</UL>

<P><STRONG><a name="[106]"></a>am_gpio_set</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, amdr_gpio.o(i.am_gpio_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_matrix_key_scan
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>am_gpio_trigger_cfg</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, amdr_gpio.o(i.am_gpio_trigger_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = am_gpio_trigger_cfg &rArr; amhw_port_pin_irq_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_port_pin_pull_up
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_port_pin_pull_enable
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_port_pin_isf_clr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_port_pin_irq_cfg
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_gpio_pin_dir_input
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_int_wake_up_cfg
</UL>

<P><STRONG><a name="[f8]"></a>am_i2c_read</STRONG> (Thumb, 204 bytes, Stack size 72 bytes, am_i2c.o(i.am_i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = am_i2c_read &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_wait_on
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_i2c_transfer
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_i2c_mktrans
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_read_len
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_wake_enable
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_reset_enable
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_int_pin_set
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_int_disable
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_gro_range_set
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_fs_set
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_clk_select
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_acc_range_set
</UL>

<P><STRONG><a name="[fc]"></a>am_i2c_write</STRONG> (Thumb, 198 bytes, Stack size 72 bytes, am_i2c.o(i.am_i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_wait_on
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_i2c_transfer
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_i2c_mktrans
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_write_len
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_wake_enable
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_sample_rate_set
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_reset_enable
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_motion_thr_set
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_int_pin_set
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_int_disable
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_gro_range_set
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_fs_set
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_clk_select
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_acc_range_set
</UL>

<P><STRONG><a name="[ad]"></a>am_int_connect</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, amdr_int.o(i.am_int_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = am_int_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_connect
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_connect
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_int_wake_up_cfg
</UL>

<P><STRONG><a name="[fd]"></a>am_int_disable</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, amdr_int.o(i.am_int_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_int_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_int_wake_up_disable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_int_wake_up_cfg
</UL>

<P><STRONG><a name="[ae]"></a>am_int_enable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, amdr_int.o(i.am_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = am_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_connect
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_connect
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_pmu_mode_into
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_int_wake_up_enable
</UL>

<P><STRONG><a name="[18]"></a>am_int_wake_up_cal</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, am_key.o(i.am_int_wake_up_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_int_wake_up_cal &rArr; amhw_port_pin_isf_clr
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_port_pin_isf_clr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> demo_std_low_fly_mouse.o(.constdata)
<LI> demo_std_low_fly_mouse.o(i.main)
</UL>
<P><STRONG><a name="[100]"></a>am_int_wake_up_cfg</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, am_key.o(i.am_int_wake_up_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = am_int_wake_up_cfg &rArr; am_gpio_pin_cfg &rArr; amhw_port_pin_func_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_pin_cfg
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_trigger_cfg
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_int_disable
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_int_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>am_int_wake_up_disable</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, am_key.o(i.am_int_wake_up_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = am_int_wake_up_disable &rArr; am_int_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>am_int_wake_up_enable</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, am_key.o(i.am_int_wake_up_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_int_wake_up_enable &rArr; am_int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>am_kprintf</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, am_debug.o(i.am_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = am_kprintf &rArr; __c89vprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_dmp_init
</UL>

<P><STRONG><a name="[104]"></a>am_matrix_key_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, am_key.o(i.am_matrix_key_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = am_matrix_key_init &rArr; am_gpio_pin_cfg &rArr; amhw_port_pin_func_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_pin_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[105]"></a>am_matrix_key_scan</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, am_key.o(i.am_matrix_key_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = am_matrix_key_scan &rArr; am_gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_set
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_get
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_matrix_key_scan_repeat
</UL>

<P><STRONG><a name="[109]"></a>am_matrix_key_scan_repeat</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, am_key.o(i.am_matrix_key_scan_repeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = am_matrix_key_scan_repeat &rArr; am_matrix_key_scan &rArr; am_gpio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_matrix_key_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10a]"></a>am_mdelay</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, am_delay.o(i.am_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_mdelay
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_systick_val_set
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_systick_reload_val_set
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_systick_flag_check
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_systick_enable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_systick_disable
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>

<P><STRONG><a name="[10f]"></a>am_mpu6050_acc_range_set</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, am_mpu6050.o(i.am_mpu6050_acc_range_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = am_mpu6050_acc_range_set &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_i2c_write
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_init
</UL>

<P><STRONG><a name="[110]"></a>am_mpu6050_clk_select</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, am_mpu6050.o(i.am_mpu6050_clk_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = am_mpu6050_clk_select &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_i2c_write
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_init
</UL>

<P><STRONG><a name="[111]"></a>am_mpu6050_fs_set</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, am_mpu6050.o(i.am_mpu6050_fs_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = am_mpu6050_fs_set &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_i2c_write
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_init
</UL>

<P><STRONG><a name="[112]"></a>am_mpu6050_gro_range_set</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, am_mpu6050.o(i.am_mpu6050_gro_range_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = am_mpu6050_gro_range_set &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_i2c_write
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_init
</UL>

<P><STRONG><a name="[113]"></a>am_mpu6050_init</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, am_mpu6050.o(i.am_mpu6050_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = am_mpu6050_init &rArr; am_mpu6050_wake_enable &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_wake_enable
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_sample_rate_set
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_reset_enable
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_motion_thr_set
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_int_pin_set
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_int_disable
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_gro_range_set
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_fs_set
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_clk_select
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_acc_range_set
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[118]"></a>am_mpu6050_int_disable</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, am_mpu6050.o(i.am_mpu6050_int_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = am_mpu6050_int_disable &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_i2c_write
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_init
</UL>

<P><STRONG><a name="[117]"></a>am_mpu6050_int_pin_set</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, am_mpu6050.o(i.am_mpu6050_int_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = am_mpu6050_int_pin_set &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_i2c_write
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_init
</UL>

<P><STRONG><a name="[116]"></a>am_mpu6050_motion_thr_set</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, am_mpu6050.o(i.am_mpu6050_motion_thr_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = am_mpu6050_motion_thr_set &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_init
</UL>

<P><STRONG><a name="[114]"></a>am_mpu6050_reset_enable</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, am_mpu6050.o(i.am_mpu6050_reset_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = am_mpu6050_reset_enable &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_i2c_write
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_init
</UL>

<P><STRONG><a name="[115]"></a>am_mpu6050_sample_rate_set</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, am_mpu6050.o(i.am_mpu6050_sample_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = am_mpu6050_sample_rate_set &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_init
</UL>

<P><STRONG><a name="[119]"></a>am_mpu6050_wake_enable</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, am_mpu6050.o(i.am_mpu6050_wake_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = am_mpu6050_wake_enable &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_i2c_write
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_init
</UL>

<P><STRONG><a name="[11a]"></a>am_mpu_dmp_get_data</STRONG> (Thumb, 560 bytes, Stack size 128 bytes, inv_mpu.o(i.am_mpu_dmp_get_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = am_mpu_dmp_get_data &rArr; dmp_read_fifo &rArr; mpu_read_fifo_stream &rArr; am_mpu_read_len &rArr; am_i2c_read &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[124]"></a>am_mpu_dmp_init</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, inv_mpu.o(i.am_mpu_dmp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = am_mpu_dmp_init &rArr; run_self_test &rArr; dmp_set_accel_bias &rArr; mpu_write_mem &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_kprintf
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_level
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_orientation_matrix_to_scalar
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_orientation
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_fifo_rate
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_load_motion_driver_firmware
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>am_mpu_read_len</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, am_mpu6050.o(i.am_mpu_read_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = am_mpu_read_len &rArr; am_i2c_read &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
</UL>

<P><STRONG><a name="[132]"></a>am_mpu_write_len</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, am_mpu6050.o(i.am_mpu_write_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>

<P><STRONG><a name="[e4]"></a>am_system_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, am_system.o(i.am_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = am_system_init &rArr; amdr_pmu_init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_plfm_pmu_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_plfm_clk_init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_pmu_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_board_init
</UL>

<P><STRONG><a name="[137]"></a>am_uart_int_init</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, am_uart_int.o(i.am_uart_int_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = am_uart_int_init &rArr; am_uart_callback_set
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_uart_callback_set
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>am_uart_int_send</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, am_uart_int.o(i.am_uart_int_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = am_uart_int_send
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_wait_on
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_data_send
</UL>

<P><STRONG><a name="[107]"></a>am_udelay</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, am_delay.o(i.am_udelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = am_udelay
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_systick_val_set
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_systick_reload_val_set
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_systick_flag_check
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_systick_enable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_systick_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_matrix_key_scan
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>amdr_clk_bus_clkrate_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, amdr_clk.o(i.amdr_clk_bus_clkrate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = amdr_clk_bus_clkrate_get &rArr; amdr_clk_core_clkrate_get &rArr; amdr_clk_mcgoutclk_rate_get &rArr; amdr_clk_mcgfllclk_rate_get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_core_clkrate_get
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_periph_rate_get
</UL>

<P><STRONG><a name="[ed]"></a>amdr_clk_core_clkrate_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, amdr_clk.o(i.amdr_clk_core_clkrate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = amdr_clk_core_clkrate_get &rArr; amdr_clk_mcgoutclk_rate_get &rArr; amdr_clk_mcgfllclk_rate_get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mcgoutclk_rate_get
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_bus_clkrate_get
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_periph_rate_get
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_delay_init
</UL>

<P><STRONG><a name="[136]"></a>amdr_clk_init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, amdr_clk.o(i.amdr_clk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = amdr_clk_init &rArr; __clk_pee_init
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fll_div_get
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_pee_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_fei_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_system_init
</UL>

<P><STRONG><a name="[13d]"></a>amdr_clk_mcgfllclk_rate_get</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, amdr_clk.o(i.amdr_clk_mcgfllclk_rate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = amdr_clk_mcgfllclk_rate_get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_oscclk_rate_get
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_osc_range_get
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_fll_src_get
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_uart0_rate_get
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_tpm_rate_get
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mcgoutclk_rate_get
</UL>

<P><STRONG><a name="[141]"></a>amdr_clk_mcgirclk_rate_get</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, amdr_clk.o(i.amdr_clk_mcgirclk_rate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = amdr_clk_mcgirclk_rate_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_periph_rate_get
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_uart0_rate_get
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_tpm_rate_get
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mcgoutclk_rate_get
</UL>

<P><STRONG><a name="[13b]"></a>amdr_clk_mcgoutclk_rate_get</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, amdr_clk.o(i.amdr_clk_mcgoutclk_rate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = amdr_clk_mcgoutclk_rate_get &rArr; amdr_clk_mcgfllclk_rate_get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_oscclk_rate_get
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mcgpllclk_rate_get
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mcgirclk_rate_get
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mcgfllclk_rate_get
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_outclk_src_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_core_clkrate_get
</UL>

<P><STRONG><a name="[143]"></a>amdr_clk_mcgpllclk_rate_get</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, amdr_clk.o(i.amdr_clk_mcgpllclk_rate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = amdr_clk_mcgpllclk_rate_get
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_oscclk_rate_get
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_uart0_rate_get
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_tpm_rate_get
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mcgoutclk_rate_get
</UL>

<P><STRONG><a name="[144]"></a>amdr_clk_mode_blpe2pee</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, amdr_clk.o(i.amdr_clk_mode_blpe2pee))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = amdr_clk_mode_blpe2pee &rArr; amdr_clk_mode_get
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_sim_clkdiv1_outdiv4_set
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_sim_clkdiv1_outdiv1_set
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_plls_stat_get
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_pll_vco_div_set
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_pll_locked_stat_get
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_pll_erc_div_set
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_outclk_stat_get
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_outclk_src_set
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_lp_plls_enable
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_get
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_pmu_mode_into
</UL>

<P><STRONG><a name="[148]"></a>amdr_clk_mode_blpi2fei</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, amdr_clk.o(i.amdr_clk_mode_blpi2fei))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = amdr_clk_mode_blpi2fei &rArr; amdr_clk_mode_get
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_sim_clkdiv1_outdiv4_set
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_sim_clkdiv1_outdiv1_set
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_outclk_stat_get
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_outclk_src_set
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_lp_plls_enable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_fll_erc_div_set
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_fll_dco_div_set
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_get
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_pmu_mode_into
</UL>

<P><STRONG><a name="[149]"></a>amdr_clk_mode_fei2blpi</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, amdr_clk.o(i.amdr_clk_mode_fei2blpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = amdr_clk_mode_fei2blpi &rArr; amdr_clk_mode_get
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_sim_clkdiv1_outdiv4_set
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_sim_clkdiv1_outdiv1_set
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_outclk_stat_get
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_outclk_src_set
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_lp_plls_disable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_irc_src_set
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_irc_fast_div_set
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_get
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_pmu_mode_into
</UL>

<P><STRONG><a name="[145]"></a>amdr_clk_mode_get</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, amdr_clk.o(i.amdr_clk_mode_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = amdr_clk_mode_get
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_plls_stat_get
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_outclk_stat_get
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_fll_src_get
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_pee2blpe
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_fei2blpi
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_blpi2fei
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_blpe2pee
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_pmu_mode_into
</UL>

<P><STRONG><a name="[14b]"></a>amdr_clk_mode_pee2blpe</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, amdr_clk.o(i.amdr_clk_mode_pee2blpe))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = amdr_clk_mode_pee2blpe &rArr; amdr_clk_mode_get
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_sim_clkdiv1_outdiv4_set
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_sim_clkdiv1_outdiv1_set
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_outclk_stat_get
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_outclk_src_set
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_mcg_lp_plls_disable
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_get
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_pmu_mode_into
</UL>

<P><STRONG><a name="[140]"></a>amdr_clk_oscclk_rate_get</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, amdr_clk.o(i.amdr_clk_oscclk_rate_get))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_uart0_rate_get
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_tpm_rate_get
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mcgpllclk_rate_get
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mcgoutclk_rate_get
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mcgfllclk_rate_get
</UL>

<P><STRONG><a name="[bf]"></a>amdr_clk_periph_rate_get</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, amdr_clk.o(i.amdr_clk_periph_rate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = amdr_clk_periph_rate_get &rArr; amdr_clk_bus_clkrate_get &rArr; amdr_clk_core_clkrate_get &rArr; amdr_clk_mcgoutclk_rate_get &rArr; amdr_clk_mcgfllclk_rate_get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_bus_clkrate_get
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_core_clkrate_get
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_uart0_rate_get
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_tpm_rate_get
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mcgirclk_rate_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_debug_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_uart_init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_ioctl
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_speed_set
</UL>

<P><STRONG><a name="[14d]"></a>amdr_clk_tpm_rate_get</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, amdr_clk.o(i.amdr_clk_tpm_rate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = amdr_clk_tpm_rate_get &rArr; amdr_clk_mcgfllclk_rate_get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_oscclk_rate_get
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mcgpllclk_rate_get
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mcgirclk_rate_get
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mcgfllclk_rate_get
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_sim_tpm_src_get
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_sim_pllfll_sel_get
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_periph_rate_get
</UL>

<P><STRONG><a name="[14c]"></a>amdr_clk_uart0_rate_get</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, amdr_clk.o(i.amdr_clk_uart0_rate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = amdr_clk_uart0_rate_get &rArr; amdr_clk_mcgfllclk_rate_get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_oscclk_rate_get
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mcgpllclk_rate_get
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mcgirclk_rate_get
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mcgfllclk_rate_get
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_sim_uart0_src_get
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_sim_pllfll_sel_get
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_periph_rate_get
</UL>

<P><STRONG><a name="[e6]"></a>amdr_gpio_init</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, amdr_gpio.o(i.amdr_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = amdr_gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_board_init
</UL>

<P><STRONG><a name="[151]"></a>amdr_i2c_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, amdr_i2c.o(i.amdr_i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = amdr_i2c_init &rArr; __i2c_hard_init &rArr; __i2c_speed_set &rArr; amdr_clk_periph_rate_get &rArr; amdr_clk_bus_clkrate_get &rArr; amdr_clk_core_clkrate_get &rArr; amdr_clk_mcgoutclk_rate_get &rArr; amdr_clk_mcgfllclk_rate_get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_hard_init
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>amdr_int_init</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, amdr_int.o(i.amdr_int_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = amdr_int_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_board_init
</UL>

<P><STRONG><a name="[134]"></a>amdr_pmu_init</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, amdr_pmu.o(i.amdr_pmu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = amdr_pmu_init
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_rcm_respin_filt_runw_cfg
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_pmc_lvdrest_disable
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_pmc_int_disable
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_pmc_ack_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_system_init
</UL>

<P><STRONG><a name="[d2]"></a>amdr_pmu_mode_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, amdr_pmu.o(i.amdr_pmu_mode_get))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_pmu_mode_into
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_vlpr_into
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_vlpr_exit
</UL>

<P><STRONG><a name="[156]"></a>amdr_pmu_mode_into</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, amdr_pmu.o(i.amdr_pmu_mode_into))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = amdr_pmu_mode_into &rArr; amdr_clk_mode_pee2blpe &rArr; amdr_clk_mode_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_int_enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_pee2blpe
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_get
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_fei2blpi
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_blpi2fei
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_blpe2pee
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_pmu_mode_get
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_wait_into
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_vlps_into
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_vlpr_into
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_vlpr_exit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_vlls_into
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_stop_into
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_lls_into
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[157]"></a>amdr_uart_init</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, amdr_uart.o(i.amdr_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = amdr_uart_init &rArr; amdr_clk_periph_rate_get &rArr; amdr_clk_bus_clkrate_get &rArr; amdr_clk_core_clkrate_get &rArr; amdr_clk_mcgoutclk_rate_get &rArr; amdr_clk_mcgfllclk_rate_get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_uart_baudrate_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_periph_rate_get
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_opt_set
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_mode_set
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_uart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[135]"></a>amhw_plfm_clk_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, amdr_hwconfig_clk.o(i.amhw_plfm_clk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = amhw_plfm_clk_init &rArr; amhw_port_pin_func_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_port_pin_func_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_system_init
</UL>

<P><STRONG><a name="[e5]"></a>amhw_plfm_gpio_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, amdr_hwconfig_gpio.o(i.amhw_plfm_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = amhw_plfm_gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_sim_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_board_init
</UL>

<P><STRONG><a name="[15a]"></a>amhw_plfm_i2c0_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, amdr_hwconfig_i2c.o(i.amhw_plfm_i2c0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = amhw_plfm_i2c0_init &rArr; am_gpio_pin_cfg &rArr; amhw_port_pin_func_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_pin_cfg
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_sim_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>amhw_plfm_pmu_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, amdr_hwconfig_pmu.o(i.amhw_plfm_pmu_init))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_system_init
</UL>

<P><STRONG><a name="[15c]"></a>amhw_plfm_uart1_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, amdr_hwconfig_uart.o(i.amhw_plfm_uart1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = amhw_plfm_uart1_init &rArr; am_gpio_pin_cfg &rArr; amhw_port_pin_func_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_pin_cfg
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_sim_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>amhw_uart_baudrate_set</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, amhw_uart.o(i.amhw_uart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = amhw_uart_baudrate_set &rArr; __err_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__err_cal
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_debug_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_uart_init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_ioctl
</UL>

<P><STRONG><a name="[120]"></a>asin</STRONG> (Thumb, 574 bytes, Stack size 80 bytes, asin.o(i.asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = asin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_dmp_get_data
</UL>

<P><STRONG><a name="[161]"></a>atan</STRONG> (Thumb, 472 bytes, Stack size 56 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[123]"></a>atan2</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, atan2.o(i.atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_dmp_get_data
</UL>

<P><STRONG><a name="[162]"></a>dmp_enable_6x_lp_quat</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_6x_lp_quat))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dmp_enable_6x_lp_quat &rArr; mpu_write_mem &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[12c]"></a>dmp_enable_feature</STRONG> (Thumb, 524 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dmp_enable_feature &rArr; dmp_set_tap_thresh &rArr; mpu_write_mem &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time_multi
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_count
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_axes
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_timeout
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_time
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_thresh
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_gyro_cal
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_dmp_init
</UL>

<P><STRONG><a name="[165]"></a>dmp_enable_gyro_cal</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_gyro_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dmp_enable_gyro_cal &rArr; mpu_write_mem &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[16e]"></a>dmp_enable_lp_quat</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_lp_quat))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dmp_enable_lp_quat &rArr; mpu_write_mem &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[129]"></a>dmp_load_motion_driver_firmware</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_load_motion_driver_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dmp_load_motion_driver_firmware &rArr; mpu_load_firmware &rArr; mpu_write_mem &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_dmp_init
</UL>

<P><STRONG><a name="[11b]"></a>dmp_read_fifo</STRONG> (Thumb, 460 bytes, Stack size 88 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_read_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = dmp_read_fifo &rArr; mpu_read_fifo_stream &rArr; am_mpu_read_len &rArr; am_i2c_read &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_gesture
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_dmp_get_data
</UL>

<P><STRONG><a name="[173]"></a>dmp_set_accel_bias</STRONG> (Thumb, 346 bytes, Stack size 96 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_accel_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dmp_set_accel_bias &rArr; mpu_write_mem &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_sens
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[12d]"></a>dmp_set_fifo_rate</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_fifo_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dmp_set_fifo_rate &rArr; mpu_write_mem &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_dmp_init
</UL>

<P><STRONG><a name="[176]"></a>dmp_set_gyro_bias</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_gyro_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dmp_set_gyro_bias &rArr; mpu_write_mem &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_mulss
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[12b]"></a>dmp_set_orientation</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_orientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dmp_set_orientation &rArr; mpu_write_mem &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_dmp_init
</UL>

<P><STRONG><a name="[16b]"></a>dmp_set_shake_reject_thresh</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_shake_reject_thresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dmp_set_shake_reject_thresh &rArr; mpu_write_mem &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[16c]"></a>dmp_set_shake_reject_time</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_shake_reject_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dmp_set_shake_reject_time &rArr; mpu_write_mem &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[16d]"></a>dmp_set_shake_reject_timeout</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_shake_reject_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dmp_set_shake_reject_timeout &rArr; mpu_write_mem &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[167]"></a>dmp_set_tap_axes</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dmp_set_tap_axes &rArr; mpu_write_mem &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[168]"></a>dmp_set_tap_count</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dmp_set_tap_count &rArr; mpu_write_mem &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[166]"></a>dmp_set_tap_thresh</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_thresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dmp_set_tap_thresh &rArr; mpu_write_mem &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_fsr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[169]"></a>dmp_set_tap_time</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dmp_set_tap_time &rArr; mpu_write_mem &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[16a]"></a>dmp_set_tap_time_multi</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_time_multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dmp_set_tap_time_multi &rArr; mpu_write_mem &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[f]"></a>fputc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, am_debug.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_uart_txdata_write
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_uart_stat1_tdre_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[172]"></a>get_ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, inv_mpu.o(i.get_ms))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
</UL>

<P><STRONG><a name="[12a]"></a>inv_orientation_matrix_to_scalar</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, inv_mpu.o(i.inv_orientation_matrix_to_scalar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_orientation_matrix_to_scalar
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_row_2_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_dmp_init
</UL>

<P><STRONG><a name="[17c]"></a>inv_row_2_scale</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, inv_mpu.o(i.inv_row_2_scale))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_orientation_matrix_to_scalar
</UL>

<P><STRONG><a name="[55]"></a>main</STRONG> (Thumb, 608 bytes, Stack size 48 bytes, demo_std_low_fly_mouse.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = main &rArr; amdr_i2c_init &rArr; __i2c_hard_init &rArr; __i2c_speed_set &rArr; amdr_clk_periph_rate_get &rArr; amdr_clk_bus_clkrate_get &rArr; amdr_clk_core_clkrate_get &rArr; amdr_clk_mcgoutclk_rate_get &rArr; amdr_clk_mcgfllclk_rate_get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_set
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mdelay
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_uart_int_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_kprintf
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_board_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_udelay
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_uart_init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_i2c_init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_pmu_mode_into
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_plfm_i2c0_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_matrix_key_scan_repeat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_matrix_key_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_int_wake_up_enable
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_int_wake_up_disable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_int_wake_up_cfg
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu6050_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_plfm_uart1_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_data_send
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_dmp_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_dmp_get_data
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[127]"></a>mpu_configure_fifo</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_configure_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mpu_configure_fifo &rArr; set_int_enable &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_dmp_init
</UL>

<P><STRONG><a name="[178]"></a>mpu_get_accel_fsr</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_accel_fsr))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
</UL>

<P><STRONG><a name="[174]"></a>mpu_get_accel_sens</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_accel_sens))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
</UL>

<P><STRONG><a name="[18b]"></a>mpu_get_fifo_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_fifo_config))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
</UL>

<P><STRONG><a name="[189]"></a>mpu_get_gyro_fsr</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_gyro_fsr))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
</UL>

<P><STRONG><a name="[180]"></a>mpu_get_lpf</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, inv_mpu.o(i.mpu_get_lpf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mpu_get_lpf &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
</UL>

<P><STRONG><a name="[18a]"></a>mpu_get_sample_rate</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_sample_rate))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
</UL>

<P><STRONG><a name="[125]"></a>mpu_init</STRONG> (Thumb, 436 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = mpu_init &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mdelay
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_kprintf
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_write_len
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_read_len
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_dmp_init
</UL>

<P><STRONG><a name="[16f]"></a>mpu_load_firmware</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, inv_mpu.o(i.mpu_load_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mpu_load_firmware &rArr; mpu_write_mem &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_write_len
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_load_motion_driver_firmware
</UL>

<P><STRONG><a name="[187]"></a>mpu_lp_accel_mode</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_lp_accel_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_write_len
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
</UL>

<P><STRONG><a name="[17e]"></a>mpu_lp_motion_interrupt</STRONG> (Thumb, 524 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_lp_motion_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mpu_lp_motion_interrupt &rArr; mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mdelay
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_write_len
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_sample_rate
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_lpf
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_fsr
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_fifo_config
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_fsr
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[170]"></a>mpu_read_fifo_stream</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_read_fifo_stream))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mpu_read_fifo_stream &rArr; am_mpu_read_len &rArr; am_i2c_read &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_read_len
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
</UL>

<P><STRONG><a name="[185]"></a>mpu_read_mem</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_read_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mpu_read_mem &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_write_len
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_read_len
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>

<P><STRONG><a name="[164]"></a>mpu_reset_fifo</STRONG> (Thumb, 480 bytes, Stack size 8 bytes, inv_mpu.o(i.mpu_reset_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mpu_reset_fifo &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mdelay
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
</UL>

<P><STRONG><a name="[182]"></a>mpu_set_accel_fsr</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_accel_fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mpu_set_accel_fsr &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[184]"></a>mpu_set_bypass</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_bypass))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mpu_set_bypass &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mdelay
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_write_len
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_read_len
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[12f]"></a>mpu_set_dmp_state</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_dmp_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_write_len
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_dmp_init
</UL>

<P><STRONG><a name="[181]"></a>mpu_set_gyro_fsr</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_gyro_fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mpu_set_gyro_fsr &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[188]"></a>mpu_set_int_latched</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_int_latched))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mpu_set_int_latched &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
</UL>

<P><STRONG><a name="[130]"></a>mpu_set_int_level</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_set_int_level))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_dmp_init
</UL>

<P><STRONG><a name="[183]"></a>mpu_set_lpf</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_lpf))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mpu_set_lpf &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[128]"></a>mpu_set_sample_rate</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_sample_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_write_len
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_dmp_init
</UL>

<P><STRONG><a name="[126]"></a>mpu_set_sensors</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_sensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mpu_set_sensors &rArr; mpu_set_int_latched &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mdelay
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_write_len
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_dmp_init
</UL>

<P><STRONG><a name="[163]"></a>mpu_write_mem</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_write_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mpu_write_mem &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time_multi
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_count
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_axes
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_timeout
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_time
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_thresh
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_orientation
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_gyro_bias
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_fifo_rate
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_gyro_cal
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
</UL>

<P><STRONG><a name="[12e]"></a>run_self_test</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, inv_mpu.o(i.run_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = run_self_test &rArr; dmp_set_accel_bias &rArr; mpu_write_mem &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_gyro_bias
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_dmp_init
</UL>

<P><STRONG><a name="[15f]"></a>sqrt</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sqrt &rArr; _dsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[4f]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[11]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[11e]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_dmp_get_data
</UL>

<P><STRONG><a name="[18e]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_dmp_get_data
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
</UL>

<P><STRONG><a name="[1ce]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[122]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_dmp_get_data
</UL>

<P><STRONG><a name="[190]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[2c]"></a>_printf_fp_dec</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[f9]"></a>am_i2c_mktrans</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, am_i2c.o(i.am_i2c_mktrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_i2c_mktrans
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_i2c_write
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_i2c_read
</UL>

<P><STRONG><a name="[fa]"></a>am_i2c_transfer</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, am_i2c.o(i.am_i2c_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_i2c_write
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_i2c_read
</UL>

<P><STRONG><a name="[fb]"></a>am_wait_on</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, am_i2c.o(i.am_wait_on))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_i2c_write
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_i2c_read
</UL>

<P><STRONG><a name="[138]"></a>am_uart_callback_set</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, am_uart_int.o(i.am_uart_callback_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = am_uart_callback_set
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_uart_int_init
</UL>

<P><STRONG><a name="[e2]"></a>am_wait_done</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, am_uart_int.o(i.am_wait_done))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__usart_int_txchar_get
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__usart_int_rxchar_put
</UL>

<P><STRONG><a name="[139]"></a>am_wait_on</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, am_uart_int.o(i.am_wait_on))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_uart_int_send
</UL>

<P><STRONG><a name="[10e]"></a>am_systick_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, am_delay.o(i.am_systick_disable))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mdelay
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_udelay
</UL>

<P><STRONG><a name="[10c]"></a>am_systick_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, am_delay.o(i.am_systick_enable))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mdelay
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_udelay
</UL>

<P><STRONG><a name="[10d]"></a>am_systick_flag_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, am_delay.o(i.am_systick_flag_check))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mdelay
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_udelay
</UL>

<P><STRONG><a name="[10b]"></a>am_systick_reload_val_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, am_delay.o(i.am_systick_reload_val_set))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mdelay
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_udelay
</UL>

<P><STRONG><a name="[ee]"></a>am_systick_val_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, am_delay.o(i.am_systick_val_set))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mdelay
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_udelay
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_delay_init
</UL>

<P><STRONG><a name="[17a]"></a>amhw_uart_stat1_tdre_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, am_debug.o(i.amhw_uart_stat1_tdre_get))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[17b]"></a>amhw_uart_txdata_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, am_debug.o(i.amhw_uart_txdata_write))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[f1]"></a>amhw_gpio_pin_dir_input</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, amdr_gpio.o(i.amhw_gpio_pin_dir_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = amhw_gpio_pin_dir_input
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_pin_cfg
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_trigger_cfg
</UL>

<P><STRONG><a name="[f2]"></a>amhw_gpio_pin_dir_output</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, amdr_gpio.o(i.amhw_gpio_pin_dir_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = amhw_gpio_pin_dir_output
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_pin_cfg
</UL>

<P><STRONG><a name="[f0]"></a>amhw_port_pin_func_cfg</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, amdr_gpio.o(i.amhw_port_pin_func_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = amhw_port_pin_func_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_pin_cfg
</UL>

<P><STRONG><a name="[f6]"></a>amhw_port_pin_irq_cfg</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, amdr_gpio.o(i.amhw_port_pin_irq_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = amhw_port_pin_irq_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_trigger_cfg
</UL>

<P><STRONG><a name="[f7]"></a>amhw_port_pin_isf_clr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, amdr_gpio.o(i.amhw_port_pin_isf_clr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = amhw_port_pin_isf_clr
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_trigger_cfg
</UL>

<P><STRONG><a name="[f3]"></a>amhw_port_pin_pull_enable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, amdr_gpio.o(i.amhw_port_pin_pull_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = amhw_port_pin_pull_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_pin_cfg
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_trigger_cfg
</UL>

<P><STRONG><a name="[f4]"></a>amhw_port_pin_pull_up</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, amdr_gpio.o(i.amhw_port_pin_pull_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = amhw_port_pin_pull_up
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_pin_cfg
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_trigger_cfg
</UL>

<P><STRONG><a name="[fe]"></a>amhw_int_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, amdr_int.o(i.amhw_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_int_disable
</UL>

<P><STRONG><a name="[1c]"></a>__uart_callback_set</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, amdr_uart.o(i.__uart_callback_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __uart_callback_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amdr_uart.o(.constdata)
</UL>
<P><STRONG><a name="[1f]"></a>__uart_connect</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, amdr_uart.o(i.__uart_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __uart_connect &rArr; am_int_connect
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_int_enable
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_int_connect
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_uart_int_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amdr_uart.o(.constdata)
</UL>
<P><STRONG><a name="[17]"></a>__uart_dummy_callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, amdr_uart.o(i.__uart_dummy_callback))
<BR>[Address Reference Count : 1]<UL><LI> amdr_uart.o(i.amdr_uart_init)
</UL>
<P><STRONG><a name="[1a]"></a>__uart_ioctl</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, amdr_uart.o(i.__uart_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __uart_ioctl &rArr; amdr_clk_periph_rate_get &rArr; amdr_clk_bus_clkrate_get &rArr; amdr_clk_core_clkrate_get &rArr; amdr_clk_mcgoutclk_rate_get &rArr; amdr_clk_mcgfllclk_rate_get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_uart_baudrate_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_periph_rate_get
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_opt_set
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_mode_set
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_uart_intstat_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amdr_uart.o(.constdata)
</UL>
<P><STRONG><a name="[1d]"></a>__uart_poll_getchar</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, amdr_uart.o(i.__uart_poll_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __uart_poll_getchar
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_uart_intstat_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amdr_uart.o(.constdata)
</UL>
<P><STRONG><a name="[1e]"></a>__uart_poll_putchar</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, amdr_uart.o(i.__uart_poll_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __uart_poll_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_uart_txdata_write
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_uart_intstat_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amdr_uart.o(.constdata)
</UL>
<P><STRONG><a name="[1b]"></a>__uart_tx_startup</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, amdr_uart.o(i.__uart_tx_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __uart_tx_startup
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_uart_int_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amdr_uart.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>amhw_uart_enable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, amdr_uart.o(i.amhw_uart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_uart_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_opt_set
</UL>

<P><STRONG><a name="[e0]"></a>amhw_uart_int_disable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, amdr_uart.o(i.amhw_uart_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_mode_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_irq_tx_handler
</UL>

<P><STRONG><a name="[d7]"></a>amhw_uart_int_enable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, amdr_uart.o(i.amhw_uart_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_mode_set
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_tx_startup
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_connect
</UL>

<P><STRONG><a name="[d9]"></a>amhw_uart_intstat_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, amdr_uart.o(i.amhw_uart_intstat_get))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_irq_tx_handler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_irq_rx_handler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_irq_handler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_poll_putchar
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_poll_getchar
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_ioctl
</UL>

<P><STRONG><a name="[df]"></a>amhw_uart_txdata_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, amdr_uart.o(i.amhw_uart_txdata_write))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_irq_tx_handler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__uart_poll_putchar
</UL>

<P><STRONG><a name="[ca]"></a>amhw_llwu_wuflags_clr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, amdr_pmu.o(i.amhw_llwu_wuflags_clr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = amhw_llwu_wuflags_clr
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_vlls_into
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_lls_into
</UL>

<P><STRONG><a name="[153]"></a>amhw_pmc_ack_set</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, amdr_pmu.o(i.amhw_pmc_ack_set))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_pmu_init
</UL>

<P><STRONG><a name="[154]"></a>amhw_pmc_int_disable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, amdr_pmu.o(i.amhw_pmc_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_pmu_init
</UL>

<P><STRONG><a name="[155]"></a>amhw_pmc_lvdrest_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, amdr_pmu.o(i.amhw_pmc_lvdrest_disable))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_pmu_init
</UL>

<P><STRONG><a name="[d3]"></a>amhw_pmc_regulator_wstat_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, amdr_pmu.o(i.amhw_pmc_regulator_wstat_get))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_vlpr_into
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_vlpr_exit
</UL>

<P><STRONG><a name="[152]"></a>amhw_rcm_respin_filt_runw_cfg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, amdr_pmu.o(i.amhw_rcm_respin_filt_runw_cfg))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_pmu_init
</UL>

<P><STRONG><a name="[d1]"></a>amhw_smc_run_mdoe_sel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, amdr_pmu.o(i.amhw_smc_run_mdoe_sel))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_vlpr_into
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_vlpr_exit
</UL>

<P><STRONG><a name="[cc]"></a>amhw_smc_stop_mdoe_isabort</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, amdr_pmu.o(i.amhw_smc_stop_mdoe_isabort))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_vlps_into
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_vlls_into
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_stop_into
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_lls_into
</UL>

<P><STRONG><a name="[cb]"></a>amhw_smc_stop_mdoe_sel</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, amdr_pmu.o(i.amhw_smc_stop_mdoe_sel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = amhw_smc_stop_mdoe_sel
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_vlps_into
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_vlls_into
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_stop_into
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pmu_lls_into
</UL>

<P><STRONG><a name="[21]"></a>__i2c_connect</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, amdr_i2c.o(i.__i2c_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __i2c_connect &rArr; am_int_connect
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_int_enable
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_int_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amdr_i2c.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>__i2c_end_with_error</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, amdr_i2c.o(i.__i2c_end_with_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __i2c_end_with_error
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_i2c_stop_signal_send
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_i2c_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_irq_handler
</UL>

<P><STRONG><a name="[b2]"></a>__i2c_hard_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, amdr_i2c.o(i.__i2c_hard_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = __i2c_hard_init &rArr; __i2c_speed_set &rArr; amdr_clk_periph_rate_get &rArr; amdr_clk_bus_clkrate_get &rArr; amdr_clk_core_clkrate_get &rArr; amdr_clk_mcgoutclk_rate_get &rArr; amdr_clk_mcgfllclk_rate_get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_i2c_disable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_speed_set
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_i2c_init
</UL>

<P><STRONG><a name="[b8]"></a>__i2c_recv_data</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, amdr_i2c.o(i.__i2c_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __i2c_recv_data
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_i2c_transmode_set
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_i2c_stop_signal_send
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_i2c_nak_respond
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_i2c_int_disable
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_i2c_ack_respond
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_mst_sm_event
</UL>

<P><STRONG><a name="[b9]"></a>__i2c_send_data</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, amdr_i2c.o(i.__i2c_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __i2c_send_data
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_i2c_transmode_set
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_i2c_stop_signal_send
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_i2c_int_disable
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_i2c_data_write
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_mst_sm_event
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_transfer
</UL>

<P><STRONG><a name="[b4]"></a>__i2c_speed_set</STRONG> (Thumb, 182 bytes, Stack size 256 bytes, amdr_i2c.o(i.__i2c_speed_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = __i2c_speed_set &rArr; amdr_clk_periph_rate_get &rArr; amdr_clk_bus_clkrate_get &rArr; amdr_clk_core_clkrate_get &rArr; amdr_clk_mcgoutclk_rate_get &rArr; amdr_clk_mcgfllclk_rate_get &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_periph_rate_get
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_hard_init
</UL>

<P><STRONG><a name="[20]"></a>__i2c_transfer</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, amdr_i2c.o(i.__i2c_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __i2c_transfer &rArr; __i2c_send_data
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_i2c_transmode_set
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_i2c_data_write
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_send_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amdr_i2c.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>amhw_i2c_ack_respond</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, amdr_i2c.o(i.amhw_i2c_ack_respond))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_mst_sm_event
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_recv_data
</UL>

<P><STRONG><a name="[bd]"></a>amhw_i2c_data_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, amdr_i2c.o(i.amhw_i2c_data_write))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_transfer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_send_data
</UL>

<P><STRONG><a name="[b3]"></a>amhw_i2c_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, amdr_i2c.o(i.amhw_i2c_disable))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_hard_init
</UL>

<P><STRONG><a name="[b1]"></a>amhw_i2c_int_disable</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, amdr_i2c.o(i.amhw_i2c_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_send_data
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_recv_data
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_end_with_error
</UL>

<P><STRONG><a name="[bc]"></a>amhw_i2c_nak_respond</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, amdr_i2c.o(i.amhw_i2c_nak_respond))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_mst_sm_event
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_recv_data
</UL>

<P><STRONG><a name="[b5]"></a>amhw_i2c_stat_clr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, amdr_i2c.o(i.amhw_i2c_stat_clr))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_irq_handler
</UL>

<P><STRONG><a name="[b0]"></a>amhw_i2c_stop_signal_send</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, amdr_i2c.o(i.amhw_i2c_stop_signal_send))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_send_data
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_recv_data
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_end_with_error
</UL>

<P><STRONG><a name="[b6]"></a>amhw_i2c_tmout_flag_clr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, amdr_i2c.o(i.amhw_i2c_tmout_flag_clr))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_irq_handler
</UL>

<P><STRONG><a name="[ba]"></a>amhw_i2c_transmode_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, amdr_i2c.o(i.amhw_i2c_transmode_set))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_mst_sm_event
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_transfer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_send_data
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__i2c_recv_data
</UL>

<P><STRONG><a name="[99]"></a>amhw_mcg_atm_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, amdr_clk.o(i.amhw_mcg_atm_disable))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_pee_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_fei_init
</UL>

<P><STRONG><a name="[a4]"></a>amhw_mcg_fll_dco_div_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, amdr_clk.o(i.amhw_mcg_fll_dco_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_pee_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_fei_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_blpi2fei
</UL>

<P><STRONG><a name="[a1]"></a>amhw_mcg_fll_erc_div_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, amdr_clk.o(i.amhw_mcg_fll_erc_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_pee_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_fei_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_blpi2fei
</UL>

<P><STRONG><a name="[13e]"></a>amhw_mcg_fll_src_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, amdr_clk.o(i.amhw_mcg_fll_src_get))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mcgfllclk_rate_get
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_get
</UL>

<P><STRONG><a name="[a0]"></a>amhw_mcg_fll_src_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, amdr_clk.o(i.amhw_mcg_fll_src_set))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_pee_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_fei_init
</UL>

<P><STRONG><a name="[a5]"></a>amhw_mcg_fll_stat_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, amdr_clk.o(i.amhw_mcg_fll_stat_get))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_pee_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_fei_init
</UL>

<P><STRONG><a name="[a3]"></a>amhw_mcg_irc_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, amdr_clk.o(i.amhw_mcg_irc_enable))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_pee_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_fei_init
</UL>

<P><STRONG><a name="[9e]"></a>amhw_mcg_irc_fast_div_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, amdr_clk.o(i.amhw_mcg_irc_fast_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_pee_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_fei_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_fei2blpi
</UL>

<P><STRONG><a name="[a2]"></a>amhw_mcg_irc_src_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, amdr_clk.o(i.amhw_mcg_irc_src_set))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_pee_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_fei_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_fei2blpi
</UL>

<P><STRONG><a name="[14a]"></a>amhw_mcg_lp_plls_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, amdr_clk.o(i.amhw_mcg_lp_plls_disable))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_pee2blpe
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_fei2blpi
</UL>

<P><STRONG><a name="[146]"></a>amhw_mcg_lp_plls_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, amdr_clk.o(i.amhw_mcg_lp_plls_enable))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_blpi2fei
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_blpe2pee
</UL>

<P><STRONG><a name="[13f]"></a>amhw_mcg_osc_range_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, amdr_clk.o(i.amhw_mcg_osc_range_get))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mcgfllclk_rate_get
</UL>

<P><STRONG><a name="[142]"></a>amhw_mcg_outclk_src_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, amdr_clk.o(i.amhw_mcg_outclk_src_get))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mcgoutclk_rate_get
</UL>

<P><STRONG><a name="[9f]"></a>amhw_mcg_outclk_src_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, amdr_clk.o(i.amhw_mcg_outclk_src_set))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_pee_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_fei_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_pee2blpe
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_fei2blpi
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_blpi2fei
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_blpe2pee
</UL>

<P><STRONG><a name="[a6]"></a>amhw_mcg_outclk_stat_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, amdr_clk.o(i.amhw_mcg_outclk_stat_get))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_pee_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_fei_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_pee2blpe
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_get
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_fei2blpi
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_blpi2fei
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_blpe2pee
</UL>

<P><STRONG><a name="[a8]"></a>amhw_mcg_pll_erc_div_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, amdr_clk.o(i.amhw_mcg_pll_erc_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_pee_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_blpe2pee
</UL>

<P><STRONG><a name="[aa]"></a>amhw_mcg_pll_locked_stat_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, amdr_clk.o(i.amhw_mcg_pll_locked_stat_get))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_pee_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_blpe2pee
</UL>

<P><STRONG><a name="[a9]"></a>amhw_mcg_pll_vco_div_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, amdr_clk.o(i.amhw_mcg_pll_vco_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_pee_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_blpe2pee
</UL>

<P><STRONG><a name="[147]"></a>amhw_mcg_plls_stat_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, amdr_clk.o(i.amhw_mcg_plls_stat_get))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_get
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_blpe2pee
</UL>

<P><STRONG><a name="[9a]"></a>amhw_sim_clkdiv1_outdiv1_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, amdr_clk.o(i.amhw_sim_clkdiv1_outdiv1_set))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_pee_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_fei_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_pee2blpe
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_fei2blpi
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_blpi2fei
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_blpe2pee
</UL>

<P><STRONG><a name="[9b]"></a>amhw_sim_clkdiv1_outdiv4_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, amdr_clk.o(i.amhw_sim_clkdiv1_outdiv4_set))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_pee_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_fei_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_pee2blpe
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_fei2blpi
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_blpi2fei
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_mode_blpe2pee
</UL>

<P><STRONG><a name="[9d]"></a>amhw_sim_ercclk32k_src_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, amdr_clk.o(i.amhw_sim_ercclk32k_src_set))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_pee_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_fei_init
</UL>

<P><STRONG><a name="[14f]"></a>amhw_sim_pllfll_sel_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, amdr_clk.o(i.amhw_sim_pllfll_sel_get))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_uart0_rate_get
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_tpm_rate_get
</UL>

<P><STRONG><a name="[9c]"></a>amhw_sim_pllfll_sel_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, amdr_clk.o(i.amhw_sim_pllfll_sel_set))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_pee_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clk_fei_init
</UL>

<P><STRONG><a name="[14e]"></a>amhw_sim_tpm_src_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, amdr_clk.o(i.amhw_sim_tpm_src_get))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_tpm_rate_get
</UL>

<P><STRONG><a name="[150]"></a>amhw_sim_uart0_src_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, amdr_clk.o(i.amhw_sim_uart0_src_get))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amdr_clk_uart0_rate_get
</UL>

<P><STRONG><a name="[ab]"></a>__err_cal</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, amhw_uart.o(i.__err_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __err_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_uart_baudrate_set
</UL>

<P><STRONG><a name="[159]"></a>amhw_sim_periph_clock_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, amdr_hwconfig_gpio.o(i.amhw_sim_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_plfm_gpio_init
</UL>

<P><STRONG><a name="[15b]"></a>amhw_sim_periph_clock_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, amdr_hwconfig_i2c.o(i.amhw_sim_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_plfm_i2c0_init
</UL>

<P><STRONG><a name="[15d]"></a>amhw_sim_periph_clock_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, amdr_hwconfig_uart.o(i.amhw_sim_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_plfm_uart1_init
</UL>

<P><STRONG><a name="[158]"></a>amhw_port_pin_func_cfg</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, amdr_hwconfig_clk.o(i.amhw_port_pin_func_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = amhw_port_pin_func_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amhw_plfm_clk_init
</UL>

<P><STRONG><a name="[ff]"></a>amhw_port_pin_isf_clr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, am_key.o(i.amhw_port_pin_isf_clr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = amhw_port_pin_isf_clr
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_int_wake_up_cal
</UL>

<P><STRONG><a name="[171]"></a>decode_gesture</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.decode_gesture))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = decode_gesture
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
</UL>

<P><STRONG><a name="[17f]"></a>set_int_enable</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, inv_mpu.o(i.set_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = set_int_enable &rArr; am_mpu_write_len &rArr; am_i2c_write &rArr; am_i2c_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpu_write_len
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>

<P><STRONG><a name="[64]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[63]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[191]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[18f]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[82]"></a>_fp_digits</STRONG> (Thumb, 408 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[10]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[91]"></a>btod_internal_mul</STRONG> (Thumb, 456 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[94]"></a>btod_internal_div</STRONG> (Thumb, 494 bytes, Stack size 64 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[96]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[30]"></a>_printf_fp_hex</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[8a]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[8c]"></a>_printf_wc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<HR></body></html>
